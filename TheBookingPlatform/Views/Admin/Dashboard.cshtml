@model TheBookingPlatform.ViewModels.AdminViewModel
@{
    ViewBag.Title = "Dashboard";
    DateTime firstDay = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime lastDayOfCurrentMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.DaysInMonth(DateTime.Now.Year, DateTime.Now.Month));
    var colors = new[] { "primary", "secondary", "success", "danger", "warning", "info", "light", "dark" };
    var random = new Random();
}
    



<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

<style>
    .scroll {
        overflow-x: scroll;
        width: contain;
    }

    label {
        width: 100%;
        margin-left: 0px;
        margin-bottom: 0px;
        margin-top: 10px;
    }

    td {
        width: 200px;
    }
</style>
<div class="container">
    @if (Model.SignedInUser.Role != "Super Admin")
    {
        var LastPaymentDate = DateTime.Parse(Model.SignedInUser.LastPaymentDate);
        var RemainderDays = (LastPaymentDate.AddMonths(1).Date - DateTime.Now.Date).Days;
        <div class="alert alert-primary">
            <span class="text-white">You have @RemainderDays days till your package subscription ends</span>
        </div>
    }
    <h3 style="font-size:1.6rem;">Dashboard - Welcome @Model.SignedInUser.Name  - (@Model.SignedInUser.Company)</h3>
    <hr />

    @if (Model.Company != null)
    {
        if (Model.OpeningHours.Count() > 7)
        {
            <div class="alert alert-danger">

                <span class="text-white">Go To Opening Hours > Create Opening Hours for Entire Week (Check is closed if you are closed on that day)</span>
            </div>
        }
        if (Model.Company.CountryName == null)
        {
            <div class="alert alert-info">
                <span class="text-white"> Go To Settings > Select Country Name</span>
            </div>
        }
        if (Model.Company.Currency == null)
        {
            <div class="alert alert-info">
                <span class="text-white">Go To Settings > Select Currency </span>
            </div>
        }
        if (Model.Company.CancellationTime == null)
        {
            <div class="alert alert-info">
                <span class="text-white">Go To Settings > Select Cancellation Time </span>
            </div>
        }
        if (Model.Company.Deposit == 0)
        {
            <div class="alert alert-danger">
                <span class="text-white">Go To Settings > Enter your Deposit %</span>
            </div>
        }
        if (Model.Company.APIKEY == null)
        {
            <div class="alert alert-danger">
                <span class="text-white"> Go To Settings > Enter your Stripe API Key  </span>
            </div>
        }
        if (Model.Company.PUBLISHEDKEY == null)
        {
            <div class="alert alert-danger">
                <span class="text-white">Go To Settings > Enter your Stripe Published Key</span>
            </div>
        }

    }
</div>

<div class="row" style="padding-left: 0; padding-right: 0;">

    @if (!User.IsInRole("Calendar"))
    {
        <div class="card">
            <div class="card-body">
                <form id="actionForm">
                    <div class="row">
                        <!-- Start Date -->
                        <div class="form-group col-md-3">
                            <div class="input-group input-group-dynamic">
                                <label for="StartDate">Start Date</label>
                                <input type="date" class="form-control"
                                       id="StartDate" name="StartDate"
                                       value="@Model.StartDate.ToString("yyyy-MM-dd")" />
                            </div>
                        </div>

                        <!-- End Date -->
                        <div class="form-group col-md-3">
                            <div class="input-group input-group-dynamic">
                                <label for="EndDate">End Date</label>
                                <input type="date" class="form-control"
                                       id="EndDate" name="EndDate"
                                       value="@Model.EndDate.ToString("yyyy-MM-dd")" />
                            </div>
                        </div>

                        <!-- Last Appointment Filter -->
                        <div class="form-group col-md-3">
                            <label for="FilterDuration">Last Appointment Filter</label>
                            <select name="FilterDuration" id="FilterDuration" class="form-select">
                                <option @(Model.FilterDuration == "30 days" ? "selected" : "") value="30 days">30 days</option>
                                <option @(Model.FilterDuration == "60 days" ? "selected" : "") value="60 days">60 days</option>
                                <option @(Model.FilterDuration == "3 months" ? "selected" : "") value="3 months">3 months ago</option>
                                <option @(Model.FilterDuration == "6 months" ? "selected" : "") value="6 months">6 months ago</option>
                                <option @(Model.FilterDuration == "1 year" ? "selected" : "") value="1 year">1 year ago</option>
                                <option @(Model.FilterDuration == "2 years" ? "selected" : "") value="2 years">2 years ago</option>
                            </select>
                        </div>

                        <!-- Filter Button -->
                        <div class="form-group col-md-3 d-flex align-items-end">
                            <button type="submit" id="filterBtn" class="btn btn-primary btn-sm">FILTER</button>
                        </div>
                    </div>
                </form>

                <!-- Statistics Title -->
                <h4 class="card-title mt-4">Clients Acquired And Return(s) Statistics</h4>

                <!-- Statistics Cards -->
                <div class="row">
                    <!-- New Clients Card -->
                    <div class="col-sm-4">
                        <div class="card">
                            <div class="card-body p-3">
                                <div class="row">
                                    <div class="col-7">
                                        <p class="text-sm mb-1 font-weight-bold">New Clients</p>
                                        <h5 class="font-weight-bolder">@Model.NewClients</h5>
                                        <p class="text-sm">New client metrics are tracked according to the booking date instead of the appointment date.</p>
                                    </div>
                                    <div class="col-5 text-end">
                                        <span class="text-xs text-secondary">@Model.StartDate.ToString("dd MMM") - @Model.EndDate.ToString("dd MMM")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Returned Visit Card -->
                    <div class="col-sm-4">
                        <div class="card">
                            <div class="card-body p-3">
                                <div class="row">
                                    <div class="col-7">
                                        <p class="text-sm mb-1 font-weight-bold">Returned Visit</p>
                                        <h5 class="font-weight-bolder">@Model.ReturnedClients</h5>
                                        <p class="text-sm">Clients who had a booking in previous months and booked again in the current/future months.</p>
                                    </div>
                                    <div class="col-5 text-end">
                                        <span class="text-xs text-secondary">@Model.StartDate.ToString("dd MMM") - @Model.EndDate.ToString("dd MMM")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Lost Clients Card -->
                    <div class="col-sm-4">
                        <div class="card">
                            <div class="card-body p-3">
                                <div class="row">
                                    <div class="col-7">
                                        <p class="text-sm mb-1 font-weight-bold">Lost Clients</p>
                                        <h5 class="font-weight-bolder">@Model.LostClients</h5>
                                        <p class="text-sm">Clients who booked in previous months but have no future appointments.</p>
                                        <button id="downloadExcel" class="btn btn-primary btn-sm mt-2">Download</button>
                                    </div>
                                    <div class="col-5 text-end">
                                        <span class="text-xs text-secondary">@Model.StartDate.ToString("dd MMM") - @Model.EndDate.ToString("dd MMM")</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>



        <div class="card" style="margin-top:20px;">
            @*<div class="card-header pb-0 p-3">
                
            </div>*@
            <div class="card-body p-3">
                <h4 class="mb-0 card-title">Employee Occupancy</h4>
                <p class="text-sm">
                    This is the percentage of time employees /staffs are productively working. Calculation also includes appointments from external calendars.
                </p>
                @if (Model.EmployeeOccupancies != null && Model.EmployeeOccupancies.Count() > 0)
                {

                    <div class="row">
                        <div class="col-5 text-center">
                            <div class="chart">
                                <canvas id="chart-consumption" class="chart-canvas" height="197"></canvas>
                            </div>
                            <h4 class="font-weight-bold mt-n8">
                                <span>@Math.Round(Model.EmployeeOccupancies.Where(x => x.Percentage >= 0).Select(x => x.Percentage).Average(),2)%</span>
                                <span class="d-block text-body text-sm">Calendar Bookings</span>
                            </h4>
                        </div>
                        <div class="col-7">
                            <div class="table-responsive">
                                <table class="table align-items-center mb-0">
                                    <tbody>
                                        @foreach (var item in Model.EmployeeOccupancies.Where(x => x.Percentage >= 0))
                                        {
                                            var color = "bg-gradient-" + colors[random.Next(colors.Length)];
                                            <tr>
                                                <td>
                                                    <div class="d-flex px-2 py-0">
                                                        <span class="badge @color me-3"> </span>
                                                        <div class="d-flex flex-column justify-content-center">
                                                            <h6 class="mb-0 text-sm">@item.Employee.Name</h6>
                                                            @*<span>Worked Hours: @item.WorkedHours</span>
                                                    <span>Total Hours: @item.TotalTime</span>*@
                                                        </div>
                                                    </div>
                                                </td>

                                                <td class="align-middle text-center text-sm">
                                                    <span class="text-xs"> @item.Percentage% </span>
                                                </td>
                                            </tr>

                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }

            </div>
        </div>
    }
</div>


<div class="modal fade" id="actionModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
    </div>
</div>
<script>
    // Convert C# data to JavaScript arrays for labels and values
    var chartLabels = [];
    var chartData = [];
         @if (Model.EmployeeOccupancies != null && Model.EmployeeOccupancies.Count() > 0)
         {
             foreach (var item in Model.EmployeeOccupancies.Where(x => x.Percentage >= 0))
             {
        <text>
            chartLabels.push('@item.Employee.Name');
            chartData.push(@item.Percentage);
        </text>
             }
         }
</script>

<script>


    function LoadChart() {
        var ctx1 = document.getElementById("chart-consumption").getContext("2d");

        var gradientStroke1 = ctx1.createLinearGradient(0, 230, 0, 50);

        gradientStroke1.addColorStop(1, 'rgba(203,12,159,0.2)');
        gradientStroke1.addColorStop(0.2, 'rgba(72,72,176,0.0)');
        gradientStroke1.addColorStop(0, 'rgba(203,12,159,0)'); //purple colors

        new Chart(ctx1, {
            type: "doughnut",
            data: {
                labels: chartLabels, // Use dynamic labels
                datasets: [{
                    label: "Consumption",
                    weight: 9,
                    cutout: 90,
                    tension: 0.9,
                    pointRadius: 2,
                    borderWidth: 2,
                    backgroundColor: ['#FF0080', '#9E9E9E', '#03A9F4', '#4CAF50', '#ff667c'],
                    data: chartData, // Use dynamic data
                    fill: false
                }],
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false,
                    }
                },
                interaction: {
                    intersect: false,
                    mode: 'index',
                },
                scales: {
                    y: {
                        grid: {
                            drawBorder: false,
                            display: false,
                            drawOnChartArea: false,
                            drawTicks: false,
                        },
                        ticks: {
                            display: false
                        }
                    },
                    x: {
                        grid: {
                            drawBorder: false,
                            display: false,
                            drawOnChartArea: false,
                            drawTicks: false,
                        },
                        ticks: {
                            display: false,
                        }
                    },
                },
            },
        });
    }

    $(".data-btn").click(function () {
        $.ajax({
            url: $(this).attr("data-href"),
        })
            .done(function (response) {
                $("#actionModal .modal-dialog").html(response);
            });
    });


    $(document).ready(function () {

        $('#actionForm').on('submit', function (event) {
            // Your function or code to execute on form submission
            showLoadingSpinner();
        });
        $('#downloadExcel').on('click', function () {

            var filterDuration = $("#FilterDuration").val();
            var StartDate = $("#StartDate").val();
            var EndDate = $("#EndDate").val();
            // Check if the user provided a duration
            $.ajax({
                url: '/Admin/GetLostClietCustomers', // Change to your controller and method
                type: 'GET',
                data: { FilterDuration: filterDuration, StartDate: StartDate, EndDate: EndDate },
                success: function (data) {
                    if (data.success) {
                        // Convert JSON data to Excel format
                        const worksheet = XLSX.utils.json_to_sheet(data.LostCustomers);
                        const workbook = XLSX.utils.book_new();
                        XLSX.utils.book_append_sheet(workbook, worksheet, "Lost Clients");

                        // Export the Excel file
                        XLSX.writeFile(workbook, "LostClients.xlsx");
                    } else {
                        alert("No lost clients found or an error occurred.");
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching data:', error);
                    alert("An error occurred while downloading the data.");
                }
            });

        });
        LoadChart();


    });




</script>

