@model TheBookingPlatform.ViewModels.BookingViewModel
@{
    ViewBag.Title = "Index";
    Random rand = new Random();


}

<script src="~/Content/MainTemplate/assets/js/jquery.min.js" type="text/javascript"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">


<style>
    /* Custom CSS */
    .table > :not(caption) > * > * {
        padding: 0rem 0rem;
        background-color: var(--bs-table-bg);
        border-bottom-width: var(--bs-border-width);
        box-shadow: inset 0 0 0 9999px var(--bs-table-accent-bg);
    }

    .CategoryBtn {
        width: max-content;
        transition: all 0.2s ease;
        margin: 0 2px;
    }

    .btn-secondary{
        background:transparent !important;
        border:none !important;
        color:#24244B !important;
    }
    .btn-primary {
        background: #24244B !important;
    }
    .CategoryBtn.active {
        background: #24244B !important;
        color: white !important;
    }

    .body-fix-osahan-footer {
        padding-bottom: 40px;
    }

    .loading-spinner-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
        z-index: 9999;
        background-color: rgba(0,0,0,0.5);
    }

    .sticky-header {
        position: sticky;
        top: 0;
        background: white;
        z-index: 100;
        padding-top: 15px;
    }

    .doctor-profile-tabs button.active {
        color: #24244B !important;
    }

    #categories-container {
        overflow-x: auto;
        white-space: nowrap;
        padding: 0px 0;
        background: white;
        border-bottom: 1px solid #dee2e6;
    }
        /* Slim the scrollbar for WebKit browsers */
        #categories-container::-webkit-scrollbar {
            height: 6px; /* Slim height for horizontal scrollbar */
        }

        #categories-container::-webkit-scrollbar-track {
            background: transparent; /* Or add a subtle color if needed */
        }

        #categories-container::-webkit-scrollbar-thumb {
            background: #ccc; /* Color of the thumb */
            border-radius: 3px;
        }

            /* Optional: on hover */
            #categories-container::-webkit-scrollbar-thumb:hover {
                background: #999;
            }
    #ServicesList {
        height: calc(100vh - 250px);
        overflow-y: auto;
        padding: 15px;
    }

    #search::placeholder {
        color: #24244B !important;
    }

    .service-card {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: white;
        border-bottom: 1px solid #dee2e6;
        padding: 15px;
        margin-bottom: 8px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
    }

    hr {
        margin: 0rem;
        color: inherit;
        border: 0;
        border-top: var(--bs-border-width) solid;
        opacity: .25;
    }

    .spinner {
        border: 16px solid #f3f3f3;
        border-top: 16px solid #3498db;
        border-radius: 50%;
        width: 120px;
        height: 120px;
        animation: spin 2s linear infinite;
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    @@keyframes spin {
        0% {
            transform: translate(-50%, -50%) rotate(0deg);
        }

        100% {
            transform: translate(-50%, -50%) rotate(360deg);
        }
    }

    #tpBAR{
        display:none !important;
    }
</style>

<div class="my-auto overflow-auto body-fix-osahan-footer">
    <div class="">
        <input type="hidden" id="CustomerID" value="@Model.CustomerID" />
        <input type="hidden" id="Company" value="@Model.Company.ID" />

        <!-- Sticky Header -->
        <div class="sticky-header">
            <!-- Search -->
            <div style="position: relative; width: fit-content; margin: auto;">
                <i class="fa fa-search" style="position: absolute; top: 50%; left: 10px; transform: translateY(-50%); color: #24244B !important;"></i>
                <input id="search" class="form-control mb-2 pb-1 px-4 fw-bold" type="text"
                       placeholder="Search for services"
                       style="background: white !important; color: #24244B !important; padding-left: 35px !important;">
            </div>

            <!-- Service Type Tabs -->
            <div class="bg-white shadow-sm border-top">
                <ul class="nav doctor-profile-tabs gap-1 p-0" id="pills-tab" role="tablist">
                    @foreach (var type in Model.Services.Select(s => s.ServiceCategory.Type).Distinct())
                    {
                        <li class="nav-item col" role="presentation">
                            <button class="nav-link w-100 @(type == Model.Services.First().ServiceCategory.Type ? "active" : "")"
                                    data-bs-toggle="pill"
                                    data-bs-target="#pills-@type.Replace(" ","_")"
                                    type="button" role="tab"
                                    aria-controls="pills-@type.Replace(" ","_")"
                                    aria-selected="true">
                                @type
                            </button>
                        </li>
                    }
                </ul>
            </div>

            <!-- Categories Scroll -->
            <div id="categories-container">
                <div class="tab-content" id="pills-tabContent">
                    @foreach (var type in Model.Services.Select(s => s.ServiceCategory.Type).Distinct())
                    {
                        <div class="tab-pane fade @(type == Model.Services.First().ServiceCategory.Type ? "show active" : "")"
                             id="pills-@type.Replace(" ","_")" role="tabpanel">
                            <table>
                                <tr class="category-row" data-type="@type">
                                    @foreach (var item in Model.Services.Where(x => x.ServiceCategory.Type == type))
                                    {
                                        <td style="border:none;">
                                            <div class="mx-1 px-1 mb-2">
                                                <button type="button" data-category="@item.ServiceCategory.ID"
                                                        class="CategoryBtn btn btn-sm btn-secondary btn-rounded"
                                                        id="@item.ServiceCategory.ID">
                                                    @item.ServiceCategory.Name
                                                </button>
                                            </div>
                                        </td>
                                    }
                                </tr>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Services List -->
        <div id="ServicesList">
            <div class="tab-content" id="services-tabContent">
                @foreach (var type in Model.Services.Select(s => s.ServiceCategory.Type).Distinct())
                {
                    <div class="tab-pane fade @(type == Model.Services.First().ServiceCategory.Type ? "show active" : "")"
                         id="TAB_pills-@type.Replace(" ","_")" role="tabpanel">
                        @foreach (var categoryGroup in Model.Services.Where(x => x.ServiceCategory.Type == type))
                        {
                            <div  class="service-item" id="Category_@categoryGroup.ServiceCategory.ID">
                                @if (categoryGroup.Services.Any())
                                {
                                    <h6 style="margin-bottom: 0px; margin-top: 0px; padding-bottom: 5px !important;" class="p-2 mx-2">@categoryGroup.ServiceCategory.Name</h6>
                                }
                                @foreach (var service in categoryGroup.Services.Where(s => s.Service.CanBookOnline))
                                {
                                    <div class="service-card">
                                        <div style="width:75%;">
                                            <h6 class="mb-1 fs-14">
                                                @service.Service.Name 
                                                @if (categoryGroup.ServiceCategory.Type == "Package Service")
                                                                                        {
                                                                                            <text>
                                                                                                (@(service.Service.NumberofSessions)x)
                                                                                            </text>
                                                                                        }
                                            </h6>
                                            <small class="text-muted">
                                                <b>@service.Service.Duration</b> | @service.Service.Notes
                                               
                                            </small>
                                            @if (service.BestSeller)
                                            {
                                                <span class="badge text-bg-success rounded-pill">MOST BOOKED</span>
                                            }

                                        </div>
                                        <div style="display:flex;align-items:baseline;gap:20px;">
                                            <h6 class="mb-1 fs-14" style="white-space:nowrap;">@service.Service.Price @Model.Company.Currency</h6>

                                            <button class="btn btn-primary btn-sm"
                                                    data-id="@service.Service.ID"
                                                    type="button"
                                                    data-bs-toggle="offcanvas"
                                                    data-bs-target="#offcanvasBottom"
                                                    onclick='showModalContent("@service.Service.ID","@service.Service.Name","@service.Service.Duration","@service.Service.Price")'>
                                                +
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Loading Spinner -->
        <div id="loadingSpinner" class="loading-spinner-overlay">
            <div class="spinner"></div>
        </div>

        <!-- Offcanvas Cart -->
        <div class="offcanvas offcanvas-bottom" tabindex="-1" id="offcanvasBottom" aria-labelledby="offcanvasBottomLabel" style="height: 80vh;">
            <div class="offcanvas-body text-center align-items-center justify-content-center">
                <div>
                    <h5 class="py-2" id="modalTitle">Selected Services</h5>
                    <p class="text-muted fs-6" id="modalContent">Your chosen services:</p>
                    <div id="modalDataTable"></div>
                </div>
            </div>
            <div class="offcanvas-footer">
                <button type="button" id="NextToDetailsButton" class="btn btn-primary btn-lg w-100 rounded-4">Choose Employees</button>
            </div>
        </div>
    </div>
</div>



<script>
    function showLoadingSpinner() {
        document.getElementById('loadingSpinner').style.display = 'block';
    }

    function hideLoadingSpinner() {
        document.getElementById('loadingSpinner').style.display = 'none';
    }
    let selectedServices = JSON.parse(localStorage.getItem('selectedServices')) || [];

    function showModalContent(id, name, duration, price) {
        // Get references to the modal elements
        const modalTitle = document.getElementById('modalTitle');
        const modalContent = document.getElementById('modalContent');
        const modalDataTable = document.getElementById('modalDataTable');

        // Update the content of the modal title and content
        modalTitle.innerHTML = "Selected Services";
        modalContent.innerHTML = "These are your selected services";

        // Check if the service with the given ID is already in selectedServices
        const existingService = selectedServices.find(service => service.id === id);

        if (!existingService) {
            // Add the service to the selectedServices array
            selectedServices.push({ id, name, duration, price });

            // Save the updated selectedServices array to localStorage
            localStorage.setItem('selectedServices', JSON.stringify(selectedServices));
        }

        // Clear the modal table
        modalDataTable.innerHTML = "";
        const table = $('<table id="ServicesTable">').addClass('table');
        const thead = $('<thead>').appendTo(table);
        const tbody = $('<tbody>').appendTo(table);

        // Create the table header (thead) with th elements
        const headerRow = $('<tr>').appendTo(thead);
        $('<th>').text('Service Name').appendTo(headerRow);
        $('<th>').text('Duration').appendTo(headerRow);
        $('<th>').text('Price').appendTo(headerRow);
        $('<th>').text('').appendTo(headerRow);
        selectedServices.forEach((service) => {
            const row = $('<tr style="vertical-align:baseline">').appendTo(tbody);
            $('<td style="display:none" class="ServiceID">').text(service.id + "_").appendTo(row);
            $('<td style="width: 40vh;padding: 10px;">').text(service.name).appendTo(row);
            $('<td style="padding:10px;">').text(service.duration).appendTo(row);
            $('<td style="padding:10px;">').text(service.price + " @Model.Company.Currency").appendTo(row);
            const deleteButton = $('<button style="padding: px 5px!important;">')
                .addClass('btn btn-sm btn-outline-danger w-100 rounded-4')
                .text('X')
                .click(function (index) {
                    // Remove the service from selectedServices and update the table
                    const serviceIdToRemove = $(this).closest('tr').find('.ServiceID').text().replace('_', '');

                    // Remove the service from selectedServices using the serviceId
                    const serviceIndexToRemove = selectedServices.findIndex(service => service.id === serviceIdToRemove);
                    selectedServices.splice(index, 1);
                    if (serviceIndexToRemove !== -1) {
                        selectedServices.splice(serviceIndexToRemove, 1);
                        saveSelectedServicesToLocalStorage();
                        showModalOnly(); // Refresh the modal content
                        checkSelectedServicesCount();
                    }

                });
            const deleteCell = $('<td style="padding: 10px;">').append(deleteButton);
            deleteCell.appendTo(row);
        });
        // Append the table to the DOM or do other necessary actions with it
        // For example, you can append it to a specific div element
        table.appendTo('body');// Appends the table to the body element


        // Create a delete button for each service


        table.appendTo(modalDataTable);
        checkSelectedServicesCount();



        // Show the modal
        const offcanvasBottom = new bootstrap.Offcanvas(document.getElementById('offcanvasBottom'));
        offcanvasBottom.show();

        offcanvasBottom._element.addEventListener('hidden.bs.offcanvas', function () {
            var elemt = document.querySelector('.offcanvas-backdrop');
            if (elemt.length > 0) {
                document.querySelector('.offcanvas-backdrop').remove();
            }
        });
        function saveSelectedServicesToLocalStorage() {
            localStorage.setItem('selectedServices', JSON.stringify(selectedServices));
        }
    }

    function showModalOnly() {
        var button = $("#ShowCartBtn");

        const modalTitle = document.getElementById('modalTitle');
        const modalContent = document.getElementById('modalContent');
        const modalDataTable = document.getElementById('modalDataTable');

        // Update the content of the modal title and content
        modalTitle.innerHTML = "Selected Services";
        modalContent.innerHTML = "These are your selected services";

        modalDataTable.innerHTML = "";

        // Clear the modal table
        const table = $('<table id="ServicesTable">').addClass('table');
        const thead = $('<thead>').appendTo(table);
        const tbody = $('<tbody>').appendTo(table);

        // Create the table header (thead) with th elements
        const headerRow = $('<tr>').appendTo(thead);
        $('<th>').text('Service Name').appendTo(headerRow);
        $('<th>').text('Duration').appendTo(headerRow);
        $('<th>').text('Price').appendTo(headerRow);
        $('<th>').text('').appendTo(headerRow);
        selectedServices.forEach((service) => {
            const row = $('<tr style="vertical-align:baseline">').appendTo(tbody);
            $('<td style="display:none" class="ServiceID">').text(service.id + "_").appendTo(row);
            $('<td style="width: 40vh;padding: 10px;">').text(service.name).appendTo(row);
            $('<td style="padding:10px;">').text(service.duration).appendTo(row);
            $('<td style="padding:10px;">').text(service.price + " @Model.Company.Currency").appendTo(row);
            const deleteButton = $('<button style="padding: px 5px!important;">')
                .addClass('btn btn-sm btn-outline-danger w-100 rounded-4')
                .text('X')
                .click(function (index) {
                    // Remove the service from selectedServices and update the table

                    selectedServices.splice(index, 1);
                    saveSelectedServicesToLocalStorage();
                    showModalOnly(); // Refresh the modal content
                    document.querySelector('.offcanvas-backdrop').remove();
                    checkSelectedServicesCount();
                });
            const deleteCell = $('<td style="padding: 10px;">').append(deleteButton);
            deleteCell.appendTo(row);
        });
        // Append the table to the DOM or do other necessary actions with it
        // For example, you can append it to a specific div element
        table.appendTo('body');// Appends the table to the body element


        // Create a delete button for each service

        table.appendTo(modalDataTable);

        // Show the modal
        const offcanvasBottom = new bootstrap.Offcanvas(document.getElementById('offcanvasBottom'));
        offcanvasBottom.show();

        offcanvasBottom._element.addEventListener('hidden.bs.offcanvas', function () {
            document.querySelector('.offcanvas-backdrop').remove();
            button.removeClass("active");
            //$('body').removeClass('offcanvas-open'); // Add this line to remove the offcanvas-open class from the body
            $('body').css('overflow', 'auto'); // Add this line to enable scrolling

        });
        button.addClass("active");

        function saveSelectedServicesToLocalStorage() {
            localStorage.setItem('selectedServices', JSON.stringify(selectedServices));
        }

        checkSelectedServicesCount();
    }

    function checkSelectedServicesCount() {
        var button = $("#NextToDetailsButton");

        if (selectedServices.length === 0) {
            // If there are no selected services, hide the button
            button.hide();
        } else {
            // If there are selected services, show the button
            button.show();
        }
    }


    checkSelectedServicesCount();


    $("#NextToDetailsButton").click(function () {
        @*showLoadingSpinner();
        var CustomerID = localStorage.getItem("C_ID") ?? "0";
        var ids = [];

        $(".ServiceID").each(function () {
            ids.push($(this).text());
        });
        var ids = $(".ServiceID").text();

        var url = '@Url.Action("Form", "Booking")';
        var By = '@Model.By';
        var businessName = '@Model.Company.Business';
        url = url + '?businessName=' + businessName + '&IDs=' + ids + '&CustomerID=' + CustomerID+'&By=' + By;*@

        var selectedService = localStorage.getItem('selectedServices');
        var serviceArray = JSON.parse(selectedService);

        // Get an array of all IDs
        var serviceIds = serviceArray.map(service => service.id);

        var ids = serviceIds.join(',');
        debugger
        var url = '@Url.Action("AvailEmps", "Booking", new {IDs="__IDS__"})';
        url = url.replace("__IDS__", ids);
        
        // Redirect to the new page with data in the query string
        window.location.href = url;
    });
    $(document).ready(function () {
        $('.doctor-profile-tabs .nav-link').on('click', function () {
            // Remove active class from all nav links
            $('.doctor-profile-tabs .nav-link').removeClass('active');

            // Add active class to the clicked link
            $(this).addClass('active');
            debugger
            // Toggle tab content manually using hardcoded IDs
            var targetId = $(this).data('bs-target');

            // Hide all tab panes
            $('#pills-Package_Service, #pills-Single_Service').removeClass('show active');
            $('#TAB_pills-Package_Service, #TAB_pills-Single_Service').removeClass('show active');

            // Show the one that matches the clicked tab
            $(targetId).addClass('show active');
            var ta = "#TAB_" + targetId.replace("#", "");
            $(ta).addClass("show active");
        });
    });
    $(document).ready(function () {
        // Function to check and hide empty categories
        function updateCategoryVisibility() {
            $(".category-heading").each(function () {
                let categoryID = $(this).attr("id").replace("Category_", ""); // Extract Category ID
                let hasVisibleServices = $(`#ServicesList .service-item[data-type="${$(this).data("type")}"]:visible`).length > 0;

                if (hasVisibleServices) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        }

        // Filter by Type
        $(".filter-type").click(function () {
            let selectedType = $(this).data("type");

            $(".service-item").each(function () {
                let serviceType = $(this).data("type");

                if (selectedType === "all" || serviceType === selectedType) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });

            updateCategoryVisibility();
        });

        // Search Functionality
        $("#search").on("input", function () {
            let query = $(this).val().toLowerCase();

            $(".service-item").each(function () {
                let serviceText = $(this).find("h6").text().toLowerCase();

                if (serviceText.includes(query)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });

            updateCategoryVisibility();
        });

        // Initial category visibility update
        updateCategoryVisibility();
    });

    $(document).ready(function () {
        var isLoggedIn = $("#CustomerID").val();
        if (isLoggedIn != 0) {
            $("#FooterNAV").show();
            $("#ProfileNAVTab").show();
        } else {
            $("#FooterNAV").show();
        //    $("#ProfileNAVTab").hide();
        }
        var serviceCategoriesList = $("#ServiceCategoriesList");
        var lastScrollTop = 0;
        var isStickyVisible = true;

        $('#ServicesList').on('scroll', function () {

            var st = $(this).scrollTop();

            if (st > lastScrollTop) {
                // Scrolling down
                if (isStickyVisible) {
                    isStickyVisible = false;
                    serviceCategoriesList.slideDown();
                }
            } else {
                // Scrolling up
                if (!isStickyVisible) {
                    isStickyVisible = true;
                    serviceCategoriesList.slideUp();

                }
            }

            lastScrollTop = st;
        });


        //$(".CategoryBtn").click(function () {
        //    var categoryID = $(this).data("category");
        //    scrollToCategory(categoryID);
        //});

        //function scrollToCategory(categoryID) {
        //    var categoryDiv = $(`[data-category='${categoryID}']`).first();
        //    if (categoryDiv.length > 0) {
        //        var scrollPosition = categoryDiv.offset().top - $("#MainPanel").offset().top;
        //        $("#MainPanel").animate({
        //            scrollTop: scrollPosition
        //        }, 500);
        //    }
        //}


        //$('.CategoryBtn').click(function () {
        //    var categoryID = $(this).data('category');
        //    if (categoryID != "0") {
        //        // Find the first service item with the corresponding categoryID
        //        var firstService = $('.service-item[data-category="' + categoryID + '"]:first');

        //        if (firstService.length) {
        //            // Scroll to the first service item
        //            $('html, body').animate({
        //                scrollTop: $('#MainPanel').offset().top
        //            }, 500);
        //        }
        //    } else {
        //        location.reload();
        //    }
        //});






    });


    document.addEventListener("DOMContentLoaded", function () {
        const buttons = document.querySelectorAll(".CategoryBtn");
        const content = document.querySelectorAll(".service-item");

        buttons.forEach((button) => {
            button.classList.remove("btn-primary");
            button.classList.add("btn-secondary");

            button.addEventListener("click", () => {
                // Reset button styles
                buttons.forEach((btn) => {
                    btn.classList.remove("btn-primary");
                    btn.classList.add("btn-secondary");
                });
                button.classList.remove("btn-secondary");
                button.classList.add("btn-primary");

                // Get category details
                const categoryId = button.dataset.category;
                const categoryType = button.closest('.category-row').dataset.type;
                const tabSelector = `#TAB_pills-${categoryType.replace(/ /g, '_')}`;
                var tabse = tabSelector.replace("TAB_", "");
                // Activate corresponding tab
                const tabTrigger = document.querySelector(`[data-bs-target="${tabse}"]`);
                if (tabTrigger) {
                    bootstrap.Tab.getOrCreateInstance(tabTrigger).show();

                    // Wait for tab to be fully shown
                    const targetHeader = document.getElementById(`Category_${categoryId}`);
                    const servicesList = document.getElementById('ServicesList');

                    if (targetHeader && servicesList) {
                        // Calculate scroll position within ServicesList
                        const targetPosition = targetHeader.offsetTop - servicesList.offsetTop;

                        // Smooth scroll within ServicesList container
                        servicesList.scrollTo({
                            top: targetPosition,
                            behavior: 'smooth'
                        });
                    }
                }
            });
        });
    });


    $(document).ready(function () {
        if ('@Model.CustomerID' != 0) {
            var href = "@Url.Action("CustomerProfile", "Booking", new { CustomerID = Model.CustomerID, businessName = Model.Company.Business })";
            $("#ProfileNAVTab").attr("href", href);
        }
        if ('@Model.CustomerID' != 0) {
            var href = "@Url.Action("Index", "Booking", new { CustomerID = Model.CustomerID, businessName = Model.Company.Business })";
            $("#HomeNAVTAB").attr("href", href);
        }

    });
</script>