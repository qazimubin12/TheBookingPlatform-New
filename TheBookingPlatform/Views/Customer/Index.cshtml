@model TheBookingPlatform.ViewModels.CustomerListingViewModel

<head>
    <link href="~/Content/TBPContent/autocomplete/content/styles.css" rel="stylesheet" />
    <script type="text/javascript" src="~/Content/TBPContent/autocomplete/src/jquery.autocomplete.js"></script>
</head>
<style>
    .choices[data-type*='select-one'] .choices__inner {
        padding-bottom: 0;
    }

    .btn {
        margin-bottom: 0rem;
        letter-spacing: 0;
        text-transform: uppercase;
        background-size: 150%;
        background-position-x: 25%;
        position: relative;
        overflow: hidden;
        -webkit-appearance: none;
    }

    .btn-sm, .btn-group-sm > .btn{
        padding-bottom:0px;
        padding-top:0px;
    }
    .table > :not(caption) > * > * {
        padding: 0.2rem 0.2rem;
    }
    input[type="text"]::placeholder {
         padding: 10px; 
    }

    .dt-info{
        display:none;
    }
    .autocomplete-suggestions {
        box-sizing: border-box;
        border-radius: 5px;
        background: #FFF;
        cursor: default;
        overflow: auto;
        -webkit-box-shadow: 1px 4px 3px rgba(50, 50, 50, 0.64);
        -moz-box-shadow: 1px 4px 3px rgba(50, 50, 50, 0.64);
        box-shadow: 1px 4px 3px rgba(50, 50, 50, 0.64);
        /* Customize the scrollbar */
        scrollbar-width: thin; /* For Firefox */
        scrollbar-color: #999 #FFF; /* For Firefox */
    }

        .autocomplete-suggestions::-webkit-scrollbar {
            width: 10px; /* Set the width of the scrollbar */
        }

        /* Define the scrollbar thumb */
        .autocomplete-suggestions::-webkit-scrollbar-thumb {
            background-color: #999; /* Color of the thumb */
            border-radius: 5px; /* Rounded corners for the thumb */
        }

            /* Define the scrollbar thumb on hover */
            .autocomplete-suggestions::-webkit-scrollbar-thumb:hover {
                background-color: #666; /* Color of the thumb on hover */
            }

        /* Define the scrollbar track on hover */
        .autocomplete-suggestions::-webkit-scrollbar-track {
            background-color: #FFF; /* Color of the track */
        }

        /* Define the scrollbar corner (optional) */
        .autocomplete-suggestions::-webkit-scrollbar-corner {
            background-color: #FFF; /* Color of the scrollbar corner */
        }
    .ui-autocomplete {
        z-index: 1051; /* Ensure it's above other Bootstrap components */
        max-height: 200px;
        overflow-y: auto;
        overflow-x: hidden;
    }

        .ui-autocomplete .ui-menu-item {
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }

            .ui-autocomplete .ui-menu-item:hover {
                background: #f8f9fa;
            }

        .ui-autocomplete .ui-state-focus {
            background: #e9ecef;
        }

</style>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Customers</h2>
        <h4>Total Customers : @Model.TotalCustomerCount</h4>
        <div class="row">
            <div style="display:flex;justify-content:start;margin-bottom:20px;">
                <a  href="@Url.Action("Action", "Customer")" class="btn btn-success "><i class="fas fa-plus mr-1"></i> Create</a>
                <button data-href="@Url.Action("Import", "Customer")" type="button" class="data-btn btn  btn-danger" data-toggle="modal" data-target="#actionModal"><i class="mdi mdi-delete"></i>IMPORT</button>
                <button type="button" id="exportBtn" class="btn btn-success "> EXPORT</button>
            </div>
            <div class="form-group">
                <div class="input-group-dynamic">
                    <input style="border:solid 1px black;border-radius:10px;" type="text" class="form-control" placeholder="Search Customers" id="AutoCompletecustomers" />
                </div>
            </div>
            <div class="col-lg-12 grid-margin stretch-card">
                @if (Model.Customers != null && Model.Customers.Any())
                {
                    <div class="">
                        <table id="CustomersTable" class="table">
                            <thead>
                                <tr>
                                    <th class="text-center">Name</th>
                                    <th class="text-center">Email</th>
                                    <th class="text-center">Mobile</th>
                                    <th class="text-center">Is Blocked</th>
                                    <th class="text-center">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model.Customers)
                                {
                                    <tr class="customerID" data-id="@item.ID">
                                        <td class="text-center" onclick='window.location.href="@Url.Action("CustomerProfile","Customer",new{ID=item.ID})"'>@item.FirstName @item.LastName</td>
                                        <td class="text-center" onclick='window.location.href="@Url.Action("CustomerProfile","Customer",new{ID=item.ID})"'>@item.Email</td>
                                        <td class="text-center" onclick='window.location.href="@Url.Action("CustomerProfile","Customer",new{ID=item.ID})"'>@item.MobileNumber</td>
                                        <td class="text-center">
                                            <select class="form-control choices__input" onchange="ChangeBlockStatus('@item.ID')">
                                                <option value="True" @(item.IsBlocked ? "selected" : "")>Yes</option>
                                                <option value="False" @(!item.IsBlocked ? "selected" : "")>No</option>
                                            </select>
                                        </td>
                                        <td class="text-center">
                                            <a href="@Url.Action("Action", "Customer", new { ID = item.ID })" class="btn btn-sm btn-rounded btn-info btn-icon-text"><i class="mdi mdi-pencil"></i> EDIT</a>
                                            <button data-href="@Url.Action("Delete", "Customer", new { ID = item.ID })" type="button" class="data-btn btn btn-sm btn-rounded btn-danger btn-icon-text" data-bs-toggle="modal" data-bs-target="#actionModal"><i class="mdi mdi-delete"></i>DELETE</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Pagination Controls -->
                    <nav aria-label="Page navigation">
                        <ul class="pagination justify-content-center">
                            @if (Model.PageNumber > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { SearchTerm = Model.SearchTerm, pageNumber = 1, pageSize = Model.PageSize })" aria-label="First">
                                        <span aria-hidden="true">First</span>
                                    </a>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { SearchTerm = Model.SearchTerm, pageNumber = Model.PageNumber - 1, pageSize = Model.PageSize })" aria-label="Previous">
                                        <span aria-hidden="true">Previous</span>
                                    </a>
                                </li>
                            }

                            @if (Model.TotalPages <= 10)
                            {
                                // Display all page numbers if less than or equal to 10
                                for (int i = 1; i <= Model.TotalPages; i++)
                                {
                                    <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { SearchTerm = Model.SearchTerm, pageNumber = i, pageSize = Model.PageSize })">@i</a>
                                    </li>
                                }
                            }
                            else
                            {
                                // Display the first page
                                <li class="page-item @(1 == Model.PageNumber ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { SearchTerm = Model.SearchTerm, pageNumber = 1, pageSize = Model.PageSize })">1</a>
                                </li>

                                // Ellipses if necessary
                                if (Model.PageNumber > 5)
                                {
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                    ;
                                }

                                // Calculate the start and end page numbers to display
                                int startPage = Math.Max(2, Model.PageNumber - 4);
                                int endPage = Math.Min(Model.TotalPages - 1, Model.PageNumber + 4);

                                for (int i = startPage; i <= endPage; i++)
                                {
                                    <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Index", new { SearchTerm = Model.SearchTerm, pageNumber = i, pageSize = Model.PageSize })">@i</a>
                                    </li>
                                }

                                // Ellipses if necessary
                                if (Model.PageNumber < Model.TotalPages - 4)
                                {
                                    <li class="page-item disabled"><span class="page-link">...</span></li>
                                    ;
                                }

                                // Display the last page
                                <li class="page-item @(Model.TotalPages == Model.PageNumber ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { SearchTerm = Model.SearchTerm, pageNumber = Model.TotalPages, pageSize = Model.PageSize })">@Model.TotalPages</a>
                                </li>
                            }

                            @if (Model.PageNumber < Model.TotalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { SearchTerm = Model.SearchTerm, pageNumber = Model.PageNumber + 1, pageSize = Model.PageSize })" aria-label="Next">
                                        <span aria-hidden="true">Next</span>
                                    </a>
                                </li>
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new { SearchTerm = Model.SearchTerm, pageNumber = Model.TotalPages, pageSize = Model.PageSize })" aria-label="Last">
                                        <span aria-hidden="true">Last</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
                else
                {
                    <div class="alert alert-warning col-md-12" role="alert">Sorry! No records exist.</div>
                }
            </div>
        </div>
    </div>
</div>



<div class="modal  fade center" id="actionModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
    </div>
</div>
<script>

    function ChangeBlockStatus(ID) {
        $.ajax({
            url: '@Url.Action("ChangeBlockStatus", "Customer")', // Update this with your controller and action names
            type: 'POST',
            data: { ID: ID },
            success: function (result) {
                alert("Status Updated");

            },
            error: function (error) {
                // Handle error response if needed
            }
        });
    }

    $("#exportBtn").click(function () {
        var rowIds = [];
        // Collect data-id from each row with class customerID
        $('#CustomersTable tr.customerID').each(function () {
            rowIds.push($(this).data('id'));
        });
        var serializedRowIds = JSON.stringify(rowIds);

        $.ajax({
            url: '@Url.Action("Export","Customer")',
            type: 'POST',
            data: {
                IDs: serializedRowIds
            },
            xhrFields: {
                responseType: 'blob' // Important
            }


        })
            .done(function (blob) {
                var link = document.createElement('a');
                // Create a blob URL for the binary data
                var url = window.URL.createObjectURL(blob);
                link.href = url;
                link.download = 'Customers.xlsx';

                // Append the link to the body
                document.body.appendChild(link);

                // Simulate a click on the link
                link.click();

                // Remove the link from the document
                document.body.removeChild(link);

                // Release the object URL
                window.URL.revokeObjectURL(url);
            });
    });


    $(document).ready(function () {
        $('#CustomersTable').DataTable({
            "paging": false, // Disable pagination
            "lengthMenu": [[10, 25, 50, 100, -1], [10, 25, 50, 100, "All"]],
            "pageLength": 100, // This will be ignored since pagination is disabled
            responsive: true,
            language: {
                search: "_INPUT_",
                searchPlaceholder: "Search records",
            }
        });
        $(document).on('click', '.data-btn', function () {
            $.ajax({
                url: $(this).attr("data-href"),
            })
                .done(function (response) {
                    $("#actionModal .modal-dialog").html(response);
                    $("#actionModal").modal('show'); // Make sure the modal is shown after the response is loaded
                });
        });
        initializeAutocompleteForCustomers();

        function initializeAutocompleteForCustomers() {
            showLoadingSpinner();
            $.ajax({
                url: '@Url.Action("GetCustomers", "Appointment")',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    var lookup = [];

                    // Iterate through the ServiceModel items
                    data.forEach(function (customer) {

                        if (customer.LastName == null) {
                            lookup.push({
                                value: customer.FirstName,
                                CustomerInitials: customer.FirstName.charAt(0),
                                CustomerName: customer.FirstName,
                                CustomerEmail: customer.Email,
                                CustomerMobileNumber: customer.MobileNumber,
                                IsBlocked: customer.IsBlocked,
                                data: {
                                    id: customer.ID // Add the service.ID to data
                                }
                            });
                        }
                        else if (customer.FirstName == null) {
                            lookup.push({
                                value: customer.LastName,
                                CustomerInitials: customer.LastName.charAt(0),
                                CustomerName: customer.LastName,
                                CustomerEmail: customer.Email,
                                CustomerMobileNumber: customer.MobileNumber,
                                IsBlocked: customer.IsBlocked,
                                data: {
                                    id: customer.ID // Add the service.ID to data
                                }
                            });
                        } else {
                            lookup.push({
                                value: customer.FirstName + " " + customer.LastName,
                                CustomerInitials: customer.FirstName.charAt(0) + customer.LastName.charAt(0),
                                CustomerName: customer.FirstName + " " + customer.LastName,
                                CustomerEmail: customer.Email,
                                CustomerMobileNumber: customer.MobileNumber,
                                IsBlocked: customer.IsBlocked,
                                data: {
                                    id: customer.ID // Add the service.ID to data
                                }
                            });
                        }
                    });
                    hideLoadingSpinner();
                    $('#AutoCompletecustomers').devbridgeAutocomplete({
                        lookup: lookup,
                        minChars: 0,
                        formatResult: function (suggestion, currentValue) {
                            // Customize the rendering of each suggestion

                            if (suggestion.IsBlocked) {
                                return '<table class="table table-hovered">' +
                                    '<tbody>' +
                                    '<tr>' +
                                    '<td style="width:70px;" class="suggestion-initial">' +
                                    '<div class="circular-box">' + suggestion.CustomerInitials + '</div>' +
                                    '</td>' +
                                    '<td class="suggestion-details">' +
                                    '<div class="customer-name">' + suggestion.CustomerName + '</div>' +
                                    '<div class="customer-email">' + suggestion.CustomerEmail + '</div>' +
                                    '<div class="customer-mobile">' + suggestion.CustomerMobileNumber + '</div>' +
                                    '<span class="customer-blockStatus text-danger">Customer Blocked</span>' +
                                    '</td>' +
                                    '</tr>' +
                                    '</tbody>' +
                                    '</table>';
                            } else {
                                return '<table class="table table-hovered">' +
                                    '<tbody>' +
                                    '<tr>' +
                                    '<td style="width:70px;" class="suggestion-initial">' +
                                    '<div class="circular-box">' + suggestion.CustomerInitials + '</div>' +
                                    '</td>' +
                                    '<td class="suggestion-details">' +
                                    '<div class="customer-name">' + suggestion.CustomerName + '</div>' +
                                    '<div class="customer-email">' + suggestion.CustomerEmail + '</div>' +
                                    '<div class="customer-mobile">' + suggestion.CustomerMobileNumber + '</div>' +
                                    '</td>' +
                                    '</tr>' +
                                    '</tbody>' +
                                    '</table>';
                            }
                        },
                        onSelect: function (suggestion) {
                            var selectedCustomerID = suggestion.data.id;
                            console.log(selectedCustomerID);
                            var $inputElement = $(this);
                            showLoadingSpinner();
                            redirectToProfile(selectedCustomerID);
                            // Now you can access the selected service ID (selectedServiceId)
                            // and use it as needed.
                        },
                        showNoSuggestionNotice: true,
                        onSearchComplete: function (query, suggestions) {
                            // Show or hide the "Create Customer" button based on search results
                            $createCustomerBtn.toggle(suggestions.length === 0);
                            //if (suggestions.length > 0) {
                            //    $("#CreateCustomerPanel").hide();
                            //} else {
                            //    $("#CreateCustomerPanel").show();

                            //}

                        },

                        noSuggestionNotice: 'Sorry, no matching results'
                    });
                },
                error: function (error) {
                    console.error('Error fetching data:', error);
                    hideLoadingSpinner();

                }
            });
        }
    });

    function redirectToProfile(id) {
        window.location.href = '@Url.Action("CustomerProfile", "Customer")' + '?ID=' + id;
    }
</script>

